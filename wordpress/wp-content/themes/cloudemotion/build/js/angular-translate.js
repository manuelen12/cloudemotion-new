/*!
 * angular-translate - v2.15.2 - 2017-06-22
 * 
 * Copyright (c) 2017 The angular-translate team, Pascal Precht; Licensed MIT
 */
/*!
 * angular-translate - v2.15.2 - 2017-06-22
 * 
 * Copyright (c) 2017 The angular-translate team, Pascal Precht; Licensed MIT
 */
/*!
 * angular-translate - v2.15.2 - 2017-06-22
 * 
 * Copyright (c) 2017 The angular-translate team, Pascal Precht; Licensed MIT
 */
!function(t,e){"function"==typeof define&&define.amd?define([],function(){return e()}):"object"==typeof module&&module.exports?module.exports=e():e()}(0,function(){function t(t){"use strict";var e=t.storageKey(),n=t.storage(),r=function(){var r=t.preferredLanguage();angular.isString(r)?t.use(r):n.put(e,t.use())};r.displayName="fallbackFromIncorrectStorageValue",n?n.get(e)?t.use(n.get(e)).catch(r):r():angular.isString(t.preferredLanguage())&&t.use(t.preferredLanguage())}function e(){"use strict";var t,e,n,r=null,a=!1,i=!1;n={sanitize:function(t,e){return"text"===e&&(t=o(t)),t},escape:function(t,e){return"text"===e&&(t=s(t)),t},sanitizeParameters:function(t,e){return"params"===e&&(t=u(t,o)),t},escapeParameters:function(t,e){return"params"===e&&(t=u(t,s)),t},sce:function(t,e,n){return"text"===e?t=l(t):"params"===e&&"filter"!==n&&(t=u(t,s)),t},sceParameters:function(t,e){return"params"===e&&(t=u(t,l)),t}},n.escaped=n.escapeParameters,this.addStrategy=function(t,e){return n[t]=e,this},this.removeStrategy=function(t){return delete n[t],this},this.useStrategy=function(t){return a=!0,r=t,this},this.$get=["$injector","$log",function(s,o){var l={},u=function(t,e,r,a){return angular.forEach(a,function(a){if(angular.isFunction(a))t=a(t,e,r);else if(angular.isFunction(n[a]))t=n[a](t,e,r);else{if(!angular.isString(n[a]))throw new Error("pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: '"+a+"'");if(!l[n[a]])try{l[n[a]]=s.get(n[a])}catch(t){throw l[n[a]]=function(){},new Error("pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: '"+a+"'")}t=l[n[a]](t,e,r)}}),t},c=function(){a||i||(o.warn("pascalprecht.translate.$translateSanitization: No sanitization strategy has been configured. This can have serious security implications. See http://angular-translate.github.io/docs/#/guide/19_security for details."),i=!0)};return s.has("$sanitize")&&(t=s.get("$sanitize")),s.has("$sce")&&(e=s.get("$sce")),{useStrategy:function(t){return function(e){t.useStrategy(e)}}(this),sanitize:function(t,e,n,a){if(r||c(),n||null===n||(n=r),!n)return t;a||(a="service");var i=angular.isArray(n)?n:[n];return u(t,e,a,i)}}}];var s=function(t){var e=angular.element("<div></div>");return e.text(t),e.html()},o=function(e){if(!t)throw new Error("pascalprecht.translate.$translateSanitization: Error cannot find $sanitize service. Either include the ngSanitize module (https://docs.angularjs.org/api/ngSanitize) or use a sanitization strategy which does not depend on $sanitize, such as 'escape'.");return t(e)},l=function(t){if(!e)throw new Error("pascalprecht.translate.$translateSanitization: Error cannot find $sce service.");return e.trustAsHtml(t)},u=function(t,e,n){if(angular.isDate(t))return t;if(angular.isObject(t)){var r=angular.isArray(t)?[]:{};if(n){if(n.indexOf(t)>-1)throw new Error("pascalprecht.translate.$translateSanitization: Error cannot interpolate parameter due recursive object")}else n=[];return n.push(t),angular.forEach(t,function(t,a){angular.isFunction(t)||(r[a]=u(t,e,n))}),n.splice(-1,1),r}return angular.isNumber(t)?t:!0===t||!1===t?t:angular.isUndefined(t)||null===t?t:e(t)}}function n(t,e,n,r){"use strict";var a,i,s,o,l,u,c,f,g,p,h,d,v,m,$,y,b={},L=[],S=t,j=[],w="translate-cloak",N=!1,x=!1,C=".",E=!1,O=!1,k=0,P=!0,A="default",T={default:function(t){return(t||"").split("-").join("_")},java:function(t){var e=(t||"").split("-").join("_"),n=e.split("_");return n.length>1?n[0].toLowerCase()+"_"+n[1].toUpperCase():e},bcp47:function(t){var e=(t||"").split("_").join("-"),n=e.split("-");return n.length>1?n[0].toLowerCase()+"-"+n[1].toUpperCase():e},"iso639-1":function(t){return(t||"").split("_").join("-").split("-")[0].toLowerCase()}},F=function(){if(angular.isFunction(r.getLocale))return r.getLocale();var t,n,a=e.$get().navigator,i=["language","browserLanguage","systemLanguage","userLanguage"];if(angular.isArray(a.languages))for(t=0;t<a.languages.length;t++)if((n=a.languages[t])&&n.length)return n;for(t=0;t<i.length;t++)if((n=a[i[t]])&&n.length)return n;return null};F.displayName="angular-translate/service: getFirstBrowserLanguage";var z=function(){var t=F()||"";return T[A]&&(t=T[A](t)),t};z.displayName="angular-translate/service: getLocale";var I=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},_=function(){return this.toString().replace(/^\s+|\s+$/g,"")},V=function(t){if(t){for(var e=[],n=angular.lowercase(t),r=0,a=L.length;r<a;r++)e.push(angular.lowercase(L[r]));if(I(e,n)>-1)return t;if(i){var s;for(var o in i)if(i.hasOwnProperty(o)){var l=!1,u=Object.prototype.hasOwnProperty.call(i,o)&&angular.lowercase(o)===angular.lowercase(t);if("*"===o.slice(-1)&&(l=o.slice(0,-1)===t.slice(0,o.length-1)),(u||l)&&(s=i[o],I(e,angular.lowercase(s))>-1))return s}}var c=t.split("_");return c.length>1&&I(e,angular.lowercase(c[0]))>-1?c[0]:void 0}},R=function(t,e){if(!t&&!e)return b;if(t&&!e){if(angular.isString(t))return b[t]}else angular.isObject(b[t])||(b[t]={}),angular.extend(b[t],D(e));return this};this.translations=R,this.cloakClassName=function(t){return t?(w=t,this):w},this.nestedObjectDelimeter=function(t){return t?(C=t,this):C};var D=function(t,e,n,r){var a,i,s,o;e||(e=[]),n||(n={});for(a in t)Object.prototype.hasOwnProperty.call(t,a)&&(o=t[a],angular.isObject(o)?D(o,e.concat(a),n,a):(i=e.length?""+e.join(C)+C+a:a,e.length&&a===r&&(s=""+e.join(C),n[s]="@:"+i),n[i]=o));return n};D.displayName="flatObject",this.addInterpolation=function(t){return j.push(t),this},this.useMessageFormatInterpolation=function(){return this.useInterpolation("$translateMessageFormatInterpolation")},this.useInterpolation=function(t){return p=t,this},this.useSanitizeValueStrategy=function(t){return n.useStrategy(t),this},this.preferredLanguage=function(t){return t?(K(t),this):a};var K=function(t){return t&&(a=t),a};this.translationNotFoundIndicator=function(t){return this.translationNotFoundIndicatorLeft(t),this.translationNotFoundIndicatorRight(t),this},this.translationNotFoundIndicatorLeft=function(t){return t?(v=t,this):v},this.translationNotFoundIndicatorRight=function(t){return t?(m=t,this):m},this.fallbackLanguage=function(t){return M(t),this};var M=function(t){return t?(angular.isString(t)?(o=!0,s=[t]):angular.isArray(t)&&(o=!1,s=t),angular.isString(a)&&I(s,a)<0&&s.push(a),this):o?s[0]:s};this.use=function(t){if(t){if(!b[t]&&!h)throw new Error("$translateProvider couldn't find translationTable for langKey: '"+t+"'");return l=t,this}return l},this.resolveClientLocale=function(){return z()};var H=function(t){return t?(S=t,this):f?f+S:S};this.storageKey=H,this.useUrlLoader=function(t,e){return this.useLoader("$translateUrlLoader",angular.extend({url:t},e))},this.useStaticFilesLoader=function(t){return this.useLoader("$translateStaticFilesLoader",t)},this.useLoader=function(t,e){return h=t,d=e||{},this},this.useLocalStorage=function(){return this.useStorage("$translateLocalStorage")},this.useCookieStorage=function(){return this.useStorage("$translateCookieStorage")},this.useStorage=function(t){return c=t,this},this.storagePrefix=function(t){return t?(f=t,this):t},this.useMissingTranslationHandlerLog=function(){return this.useMissingTranslationHandler("$translateMissingTranslationHandlerLog")},this.useMissingTranslationHandler=function(t){return g=t,this},this.usePostCompiling=function(t){return N=!!t,this},this.forceAsyncReload=function(t){return x=!!t,this},this.uniformLanguageTag=function(t){return t?angular.isString(t)&&(t={standard:t}):t={},A=t.standard,this},this.determinePreferredLanguage=function(t){var e=t&&angular.isFunction(t)?t():z();return a=L.length?V(e)||e:e,this},this.registerAvailableLanguageKeys=function(t,e){return t?(L=t,e&&(i=e),this):L},this.useLoaderCache=function(t){return!1===t?$=void 0:!0===t?$=!0:void 0===t?$="$translationCache":t&&($=t),this},this.directivePriority=function(t){return void 0===t?k:(k=t,this)},this.statefulFilter=function(t){return void 0===t?P:(P=t,this)},this.postProcess=function(t){return y=t||void 0,this},this.keepContent=function(t){return O=!!t,this},this.$get=["$log","$injector","$rootScope","$q",function(t,e,n,r){var i,f,A,T=e.get(p||"$translateDefaultInterpolation"),F=!1,U={},G={},q=function(t,e,n,o,u){!l&&a&&(l=a);var g=u&&u!==l?V(u)||u:l;if(u&&ut(u),angular.isArray(t)){return function(t){for(var a={},i=[],s=0,l=t.length;s<l;s++)i.push(function(t){var i=r.defer(),s=function(e){a[t]=e,i.resolve([t,e])};return q(t,e,n,o,u).then(s,s),i.promise}(t[s]));return r.all(i).then(function(){return a})}(t)}var p=r.defer();t&&(t=_.apply(t));var h=function(){var t=a?G[a]:G[g];if(f=0,c&&!t){var e=i.get(S);if(t=G[e],s&&s.length){var n=I(s,e);f=0===n?1:0,I(s,a)<0&&s.push(a)}}return t}();if(h){var d=function(){u||(g=l),it(t,e,n,o,g).then(p.resolve,p.reject)};d.displayName="promiseResolved",h.finally(d).catch(angular.noop)}else it(t,e,n,o,g).then(p.resolve,p.reject);return p.promise},Y=function(t){return v&&(t=[v,t].join(" ")),m&&(t=[t,m].join(" ")),t},B=function(t){l=t,c&&i.put(q.storageKey(),l),n.$emit("$translateChangeSuccess",{language:t}),T.setLocale(l);var e=function(t,e){U[e].setLocale(l)};e.displayName="eachInterpolatorLocaleSetter",angular.forEach(U,e),n.$emit("$translateChangeEnd",{language:t})},J=function(t){if(!t)throw"No language key specified for loading.";var a=r.defer();n.$emit("$translateLoadingStart",{language:t}),F=!0;var i=$;"string"==typeof i&&(i=e.get(i));var s=angular.extend({},d,{key:t,$http:angular.extend({},{cache:i},d.$http)}),o=function(e){var r={};n.$emit("$translateLoadingSuccess",{language:t}),angular.isArray(e)?angular.forEach(e,function(t){angular.extend(r,D(t))}):angular.extend(r,D(e)),F=!1,a.resolve({key:t,table:r}),n.$emit("$translateLoadingEnd",{language:t})};o.displayName="onLoaderSuccess";var l=function(t){n.$emit("$translateLoadingError",{language:t}),a.reject(t),n.$emit("$translateLoadingEnd",{language:t})};return l.displayName="onLoaderError",e.get(h)(s).then(o,l),a.promise};if(c&&(i=e.get(c),!i.get||!i.put))throw new Error("Couldn't use storage '"+c+"', missing get() or put() method!");if(j.length){var Q=function(t){var n=e.get(t);n.setLocale(a||l),U[n.getInterpolationIdentifier()]=n};Q.displayName="interpolationFactoryAdder",angular.forEach(j,Q)}var W=function(t){var e=r.defer();if(Object.prototype.hasOwnProperty.call(b,t))e.resolve(b[t]);else if(G[t]){var n=function(t){R(t.key,t.table),e.resolve(t.table)};n.displayName="translationTableResolver",G[t].then(n,e.reject)}else e.reject();return e.promise},X=function(t,e,n,a,i){var s=r.defer(),o=function(r){if(Object.prototype.hasOwnProperty.call(r,e)&&null!==r[e]){a.setLocale(t);var o=r[e];if("@:"===o.substr(0,2))X(t,o.substr(2),n,a,i).then(s.resolve,s.reject);else{var u=a.interpolate(r[e],n,"service",i,e);u=lt(e,r[e],u,n,t),s.resolve(u)}a.setLocale(l)}else s.reject()};return o.displayName="fallbackTranslationResolver",W(t).then(o,s.reject),s.promise},Z=function(t,e,n,r,a){var i,s=b[t];if(s&&Object.prototype.hasOwnProperty.call(s,e)&&null!==s[e]){if(r.setLocale(t),i=r.interpolate(s[e],n,"filter",a,e),i=lt(e,s[e],i,n,t,a),!angular.isString(i)&&angular.isFunction(i.$$unwrapTrustedValue)){var o=i.$$unwrapTrustedValue();if("@:"===o.substr(0,2))return Z(t,o.substr(2),n,r,a)}else if("@:"===i.substr(0,2))return Z(t,i.substr(2),n,r,a);r.setLocale(l)}return i},tt=function(t,n,r,a){return g?e.get(g)(t,l,n,r,a):t},et=function(t,e,n,a,i,o){var l=r.defer();if(t<s.length){var u=s[t];X(u,e,n,a,o).then(function(t){l.resolve(t)},function(){return et(t+1,e,n,a,i,o).then(l.resolve,l.reject)})}else if(i)l.resolve(i);else{var c=tt(e,n,i);g&&c?l.resolve(c):l.reject(Y(e))}return l.promise},nt=function(t,e,n,r,a){var i;if(t<s.length){var o=s[t];i=Z(o,e,n,r,a),i||""===i||(i=nt(t+1,e,n,r))}return i},rt=function(t,e,n,r,a){return et(A>0?A:f,t,e,n,r,a)},at=function(t,e,n,r){return nt(A>0?A:f,t,e,n,r)},it=function(t,e,n,a,i,o){var l=r.defer(),u=i?b[i]:b,c=n?U[n]:T;if(u&&Object.prototype.hasOwnProperty.call(u,t)&&null!==u[t]){var f=u[t];if("@:"===f.substr(0,2))q(f.substr(2),e,n,a,i).then(l.resolve,l.reject);else{var p=c.interpolate(f,e,"service",o,t);p=lt(t,f,p,e,i),l.resolve(p)}}else{var h;g&&!F&&(h=tt(t,e,a)),i&&s&&s.length?rt(t,e,c,a,o).then(function(t){l.resolve(t)},function(t){l.reject(Y(t))}):g&&!F&&h?a?l.resolve(a):l.resolve(h):a?l.resolve(a):l.reject(Y(t))}return l.promise},st=function(t,e,n,r,a){var i,o=r?b[r]:b,l=T;if(U&&Object.prototype.hasOwnProperty.call(U,n)&&(l=U[n]),o&&Object.prototype.hasOwnProperty.call(o,t)&&null!==o[t]){var u=o[t];"@:"===u.substr(0,2)?i=st(u.substr(2),e,n,r,a):(i=l.interpolate(u,e,"filter",a,t),i=lt(t,u,i,e,r,a))}else{var c;g&&!F&&(c=tt(t,e,a)),r&&s&&s.length?(f=0,i=at(t,e,l,a)):i=g&&!F&&c?c:Y(t)}return i},ot=function(t){u===t&&(u=void 0),G[t]=void 0},lt=function(t,n,r,a,i,s){var o=y;return o&&("string"==typeof o&&(o=e.get(o)),o)?o(t,n,r,a,i,s):r},ut=function(t){b[t]||!h||G[t]||(G[t]=J(t).then(function(t){return R(t.key,t.table),t}))};q.preferredLanguage=function(t){return t&&K(t),a},q.cloakClassName=function(){return w},q.nestedObjectDelimeter=function(){return C},q.fallbackLanguage=function(t){if(void 0!==t&&null!==t){if(M(t),h&&s&&s.length)for(var e=0,n=s.length;e<n;e++)G[s[e]]||(G[s[e]]=J(s[e]));q.use(q.use())}return o?s[0]:s},q.useFallbackLanguage=function(t){if(void 0!==t&&null!==t)if(t){var e=I(s,t);e>-1&&(A=e)}else A=0},q.proposedLanguage=function(){return u},q.storage=function(){return i},q.negotiateLocale=V,q.use=function(t){if(!t)return l;var e=r.defer();e.promise.then(null,angular.noop),n.$emit("$translateChangeStart",{language:t});var a=V(t);return L.length>0&&!a?r.reject(t):(a&&(t=a),u=t,!x&&b[t]||!h||G[t]?G[t]?G[t].then(function(t){return u===t.key&&B(t.key),e.resolve(t.key),t},function(t){return!l&&s&&s.length>0&&s[0]!==t?q.use(s[0]).then(e.resolve,e.reject):e.reject(t)}):(e.resolve(t),B(t)):(G[t]=J(t).then(function(n){return R(n.key,n.table),e.resolve(n.key),u===t&&B(n.key),n},function(t){return n.$emit("$translateChangeError",{language:t}),e.reject(t),n.$emit("$translateChangeEnd",{language:t}),r.reject(t)}),G[t].finally(function(){ot(t)}).catch(angular.noop)),e.promise)},q.resolveClientLocale=function(){return z()},q.storageKey=function(){return H()},q.isPostCompilingEnabled=function(){return N},q.isForceAsyncReloadEnabled=function(){return x},q.isKeepContent=function(){return O},q.refresh=function(t){function e(t){var e=J(t);return G[t]=e,e.then(function(e){b[t]={},R(t,e.table),i[t]=!0},angular.noop),e}if(!h)throw new Error("Couldn't refresh translation table, no loader registered!");n.$emit("$translateRefreshStart",{language:t});var a=r.defer(),i={};if(a.promise.then(function(){for(var t in b)b.hasOwnProperty(t)&&(t in i||delete b[t]);l&&B(l)},angular.noop).finally(function(){n.$emit("$translateRefreshEnd",{language:t})}),t)b[t]?e(t).then(a.resolve,a.reject):a.reject();else{var o=s&&s.slice()||[];l&&-1===o.indexOf(l)&&o.push(l),r.all(o.map(e)).then(a.resolve,a.reject)}return a.promise},q.instant=function(t,e,n,r,i){var o=r&&r!==l?V(r)||r:l;if(null===t||angular.isUndefined(t))return t;if(r&&ut(r),angular.isArray(t)){for(var u={},c=0,f=t.length;c<f;c++)u[t[c]]=q.instant(t[c],e,n,r,i);return u}if(angular.isString(t)&&t.length<1)return t;t&&(t=_.apply(t));var p,h=[];a&&h.push(a),o&&h.push(o),s&&s.length&&(h=h.concat(s));for(var d=0,$=h.length;d<$;d++){var y=h[d];if(b[y]&&void 0!==b[y][t]&&(p=st(t,e,n,o,i)),void 0!==p)break}if(!p&&""!==p)if(v||m)p=Y(t);else{p=T.interpolate(t,e,"filter",i);var L;g&&!F&&(L=tt(t,e,i)),g&&!F&&L&&(p=L)}return p},q.versionInfo=function(){return"2.15.2"},q.loaderCache=function(){return $},q.directivePriority=function(){return k},q.statefulFilter=function(){return P},q.isReady=function(){return E};var ct=r.defer();ct.promise.then(function(){E=!0}),q.onReady=function(t){var e=r.defer();return angular.isFunction(t)&&e.promise.then(t),E?e.resolve():ct.promise.then(e.resolve),e.promise},q.getAvailableLanguageKeys=function(){return L.length>0?L:null},q.getTranslationTable=function(t){return t=t||q.use(),t&&b[t]?angular.copy(b[t]):null};var ft=n.$on("$translateReady",function(){ct.resolve(),ft(),ft=null}),gt=n.$on("$translateChangeEnd",function(){ct.resolve(),gt(),gt=null});if(h){if(angular.equals(b,{})&&q.use()&&q.use(q.use()),s&&s.length)for(var pt=function(t){return R(t.key,t.table),n.$emit("$translateChangeEnd",{language:t.key}),t},ht=0,dt=s.length;ht<dt;ht++){var vt=s[ht];!x&&b[vt]||(G[vt]=J(vt).then(pt))}}else n.$emit("$translateReady",{language:q.use()});return q}]}function r(t,e){"use strict";var n,r={};return r.setLocale=function(t){n=t},r.getInterpolationIdentifier=function(){return"default"},r.useSanitizeValueStrategy=function(t){return e.useStrategy(t),this},r.interpolate=function(n,r,a,i,s){r=r||{},r=e.sanitize(r,"params",i,a);var o;return angular.isNumber(n)?o=""+n:angular.isString(n)?(o=t(n)(r),o=e.sanitize(o,"text",i,a)):o="",o},r}function a(t,e,n,r,a){"use strict";var s=function(){return this.toString().replace(/^\s+|\s+$/g,"")};return{restrict:"AE",scope:!0,priority:t.directivePriority(),compile:function(o,l){var u=l.translateValues?l.translateValues:void 0,c=l.translateInterpolation?l.translateInterpolation:void 0,f=o[0].outerHTML.match(/translate-value-+/i),g="^(.*)("+e.startSymbol()+".*"+e.endSymbol()+")(.*)",p="^(.*)"+e.startSymbol()+"(.*)"+e.endSymbol()+"(.*)";return function(o,h,d){o.interpolateParams={},o.preText="",o.postText="",o.translateNamespace=i(o);var v={},m=function(t){if(angular.isFunction(m._unwatchOld)&&(m._unwatchOld(),m._unwatchOld=void 0),angular.equals(t,"")||!angular.isDefined(t)){var n=s.apply(h.text()),r=n.match(g);if(angular.isArray(r)){o.preText=r[1],o.postText=r[3],v.translate=e(r[2])(o.$parent);var a=n.match(p);angular.isArray(a)&&a[2]&&a[2].length&&(m._unwatchOld=o.$watch(a[2],function(t){v.translate=t,L()}))}else v.translate=n||void 0}else v.translate=t;L()};!function(t,e,n){if(e.translateValues&&angular.extend(t,r(e.translateValues)(o.$parent)),f)for(var a in n)if(Object.prototype.hasOwnProperty.call(e,a)&&"translateValue"===a.substr(0,14)&&"translateValues"!==a){var i=angular.lowercase(a.substr(14,1))+a.substr(15);t[i]=n[a]}}(o.interpolateParams,d,l);var $=!0;d.$observe("translate",function(t){void 0===t?m(""):""===t&&$||(v.translate=t,L()),$=!1});for(var y in d)d.hasOwnProperty(y)&&"translateAttr"===y.substr(0,13)&&y.length>13&&function(t){d.$observe(t,function(e){v[t]=e,L()})}(y);if(d.$observe("translateDefault",function(t){o.defaultText=t,L()}),u&&d.$observe("translateValues",function(t){t&&o.$parent.$watch(function(){angular.extend(o.interpolateParams,r(t)(o.$parent))})}),f){for(var b in d)Object.prototype.hasOwnProperty.call(d,b)&&"translateValue"===b.substr(0,14)&&"translateValues"!==b&&function(t){d.$observe(t,function(e){var n=angular.lowercase(t.substr(14,1))+t.substr(15);o.interpolateParams[n]=e})}(b)}var L=function(){for(var t in v)v.hasOwnProperty(t)&&void 0!==v[t]&&S(t,v[t],o,o.interpolateParams,o.defaultText,o.translateNamespace)},S=function(e,n,r,a,i,s){n?(s&&"."===n.charAt(0)&&(n=s+n),t(n,a,c,i,r.translateLanguage).then(function(t){j(t,r,!0,e)},function(t){j(t,r,!1,e)})):j(n,r,!1,e)},j=function(e,r,a,i){if(a||void 0!==r.defaultText&&(e=r.defaultText),"translate"===i){(a||!a&&!t.isKeepContent()&&void 0===d.translateKeepContent)&&h.empty().append(r.preText+e+r.postText);var s=t.isPostCompilingEnabled(),o=void 0!==l.translateCompile,u=o&&"false"!==l.translateCompile;(s&&!o||u)&&n(h.contents())(r)}else{var c=d.$attr[i];"data-"===c.substr(0,5)&&(c=c.substr(5)),c=c.substr(15),h.attr(c,e)}};(u||f||d.translateDefault)&&o.$watch("interpolateParams",L,!0),o.$on("translateLanguageChanged",L);var w=a.$on("$translateChangeSuccess",L);h.text().length?m(d.translate?d.translate:""):d.translate&&m(d.translate),L(),o.$on("$destroy",w)}}}}function i(t){"use strict";return t.translateNamespace?t.translateNamespace:t.$parent?i(t.$parent):void 0}function s(t,e){"use strict";return{restrict:"A",priority:t.directivePriority(),link:function(n,r,a){var i,s,l={},u=function(){angular.forEach(i,function(e,i){e&&(l[i]=!0,n.translateNamespace&&"."===e.charAt(0)&&(e=n.translateNamespace+e),t(e,s,a.translateInterpolation,void 0,n.translateLanguage).then(function(t){r.attr(i,t)},function(t){r.attr(i,t)}))}),angular.forEach(l,function(t,e){i[e]||(r.removeAttr(e),delete l[e])})};o(n,a.translateAttr,function(t){i=t},u),o(n,a.translateValues,function(t){s=t},u),a.translateValues&&n.$watch(a.translateValues,u,!0),n.$on("translateLanguageChanged",u);var c=e.$on("$translateChangeSuccess",u);u(),n.$on("$destroy",c)}}}function o(t,e,n,r){"use strict";e&&("::"===e.substr(0,2)?e=e.substr(2):t.$watch(e,function(t){n(t),r()},!0),n(t.$eval(e)))}function l(t,e){"use strict";return{compile:function(n){var r=function(e){e.addClass(t.cloakClassName())},a=function(e){e.removeClass(t.cloakClassName())};return r(n),function(n,i,s){var o=a.bind(this,i),l=r.bind(this,i);s.translateCloak&&s.translateCloak.length?(s.$observe("translateCloak",function(e){t(e).then(o,l)}),e.$on("$translateChangeSuccess",function(){t(s.translateCloak).then(o,l)})):t.onReady(o)}}}}function u(){"use strict";return{restrict:"A",scope:!0,compile:function(){return{pre:function(t,e,n){t.translateNamespace=i(t),t.translateNamespace&&"."===n.translateNamespace.charAt(0)?t.translateNamespace+=n.translateNamespace:t.translateNamespace=n.translateNamespace}}}}}function i(t){"use strict";return t.translateNamespace?t.translateNamespace:t.$parent?i(t.$parent):void 0}function c(){"use strict";return{restrict:"A",scope:!0,compile:function(){return function(t,e,n){n.$observe("translateLanguage",function(e){t.translateLanguage=e}),t.$watch("translateLanguage",function(){t.$broadcast("translateLanguageChanged")})}}}}function f(t,e){"use strict";var n=function(n,r,a,i){if(!angular.isObject(r)){var s=this||{__SCOPE_IS_NOT_AVAILABLE:"More info at https://github.com/angular/angular.js/commit/8863b9d04c722b278fa93c5d66ad1e578ad6eb1f"};r=t(r)(s)}return e.instant(n,r,a,i)};return e.statefulFilter()&&(n.$stateful=!0),n}function g(t){"use strict";return t("translations")}return t.$inject=["$translate"],n.$inject=["$STORAGE_KEY","$windowProvider","$translateSanitizationProvider","pascalprechtTranslateOverrider"],r.$inject=["$interpolate","$translateSanitization"],a.$inject=["$translate","$interpolate","$compile","$parse","$rootScope"],s.$inject=["$translate","$rootScope"],l.$inject=["$translate","$rootScope"],f.$inject=["$parse","$translate"],g.$inject=["$cacheFactory"],angular.module("pascalprecht.translate",["ng"]).run(t),t.displayName="runTranslate",angular.module("pascalprecht.translate").provider("$translateSanitization",e),angular.module("pascalprecht.translate").constant("pascalprechtTranslateOverrider",{}).provider("$translate",n),n.displayName="displayName",angular.module("pascalprecht.translate").factory("$translateDefaultInterpolation",r),r.displayName="$translateDefaultInterpolation",angular.module("pascalprecht.translate").constant("$STORAGE_KEY","NG_TRANSLATE_LANG_KEY"),angular.module("pascalprecht.translate").directive("translate",a),a.displayName="translateDirective",angular.module("pascalprecht.translate").directive("translateAttr",s),s.displayName="translateAttrDirective",angular.module("pascalprecht.translate").directive("translateCloak",l),l.displayName="translateCloakDirective",angular.module("pascalprecht.translate").directive("translateNamespace",u),u.displayName="translateNamespaceDirective",angular.module("pascalprecht.translate").directive("translateLanguage",c),c.displayName="translateLanguageDirective",angular.module("pascalprecht.translate").filter("translate",f),f.displayName="translateFilterFactory",angular.module("pascalprecht.translate").factory("$translationCache",g),g.displayName="$translationCache","pascalprecht.translate"}),function(t,e){"function"==typeof define&&define.amd?define([],function(){return e()}):"object"==typeof module&&module.exports?module.exports=e():e()}(0,function(){function t(t,e){"use strict";return function(n){if(!n||!(angular.isArray(n.files)||angular.isString(n.prefix)&&angular.isString(n.suffix)))throw new Error("Couldn't load static files, no files and prefix or suffix specified!");n.files||(n.files=[{prefix:n.prefix,suffix:n.suffix}]);for(var r=[],a=n.files.length,i=0;i<a;i++)r.push(function(r){if(!r||!angular.isString(r.prefix)||!angular.isString(r.suffix))throw new Error("Couldn't load static file, no prefix or suffix specified!");var a=[r.prefix,n.key,r.suffix].join("");return angular.isObject(n.fileMap)&&n.fileMap[a]&&(a=n.fileMap[a]),e(angular.extend({url:a,method:"GET"},n.$http)).then(function(t){return t.data},function(){return t.reject(n.key)})}({prefix:n.files[i].prefix,key:n.key,suffix:n.files[i].suffix}));return t.all(r).then(function(t){for(var e=t.length,n={},r=0;r<e;r++)for(var a in t[r])n[a]=t[r][a];return n})}}return t.$inject=["$q","$http"],angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",t),t.displayName="$translateStaticFilesLoader","pascalprecht.translate"}),function(t,e){"function"==typeof define&&define.amd?define([],function(){return e()}):"object"==typeof module&&module.exports?module.exports=e():e()}(0,function(){function t(t){"use strict";return function(e){t.warn("Translation for "+e+" doesn't exist")}}return t.$inject=["$log"],angular.module("pascalprecht.translate").factory("$translateMissingTranslationHandlerLog",t),t.displayName="$translateMissingTranslationHandlerLog","pascalprecht.translate"});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
